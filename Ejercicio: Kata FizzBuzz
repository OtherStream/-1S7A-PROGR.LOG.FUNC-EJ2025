import Data.Map (Map, fromList, lookup)
import Data.Maybe (fromMaybe)


numerosPalabras :: Map Int String
numerosPalabras = fromList [
    (1, "one"), (2, "two"), (3, "three"), (4, "four"), (5, "five"),
    (6, "six"), (7, "seven"), (8, "eight"), (9, "nine"), (10, "ten"),
    (11, "eleven"), (12, "twelve"), (13, "thirteen"), (14, "fourteen"), (15, "fifteen"),
    (16, "sixteen"), (17, "seventeen"), (18, "eighteen"), (19, "nineteen"), (20, "twenty"),
    (30, "thirty"), (40, "forty"), (50, "fifty"), (60, "sixty"), (70, "seventy"),
    (80, "eighty"), (90, "ninety")
    ]


numeroATexto  :: Int -> String
numeroATexto  n
    | n <= 20 = fromMaybe (show n) (Data.Map.lookup n numerosPalabras)
    | n < 100 = case Data.Map.lookup (n - (n `mod` 10)) numerosPalabras of
        Just decena -> decena ++ if n `mod` 10 /= 0 then "-" ++ numeroATexto (n `mod` 10) else ""
        Nothing -> show n
    | otherwise = show n 


fizzBuzz :: Int -> String
fizzBuzz n
    | n `mod` 15 == 0 = "FizzBuzz!"
    | n `mod` 3 == 0  = "Fizz!"
    | n `mod` 5 == 0  = "Buzz!"
    | otherwise       = numeroATexto n ++ "!"


main :: IO ()
main = do
    putStrLn "Ingrese un número límite:"
    input <- getLine
    let num = read input :: Int
    mapM_ (putStrLn . fizzBuzz) [1..num]
