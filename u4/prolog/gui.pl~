:- use_module(library(pce)).
:- consult('reglas.pl').

inicio :-
    new(V, dialog('Consulta de Plantas Medicinales')),
    send(V, size, size(450, 600)),

    % Campo de entrada
    send(V, append, new(Entrada, text_item('Nombre de la planta'))),
    send(Entrada, name, entrada),

    % Botones agregados verticalmente con 'below'
    send(V, append, button('Nombre cientifico',
        message(@prolog, ejecutar_opcion, nombre, V)), below),
    send(V, append, button('Origen',
        message(@prolog, ejecutar_opcion, origen, V)), below),
    send(V, append, button('Enfermedades que trata',
        message(@prolog, ejecutar_opcion, enfermedades, V)), below),
    send(V, append, button('Sintomas de enfermedades',
        message(@prolog, ejecutar_opcion, sintomas, V)), below),
    send(V, append, button('Modo de preparacion',
        message(@prolog, ejecutar_opcion, preparacion, V)), below),
    send(V, append, button('Acciones de la planta',
        message(@prolog, ejecutar_opcion, acciones, V)), below),
    send(V, append, button('Mostrar toda la informacion',
        message(@prolog, ejecutar_opcion, toda, V)), below),

    % Area de salida
    new(Salida, editor),
    send(Salida, size, size(40, 6)),
    send(Salida, name, salida),
    send(V, append, Salida),

    % Area para la imagen (usar bitmap en lugar de image)
    new(Imagen, bitmap),
    send(Imagen, name, imagen),
    send(V, append, Imagen, below),

    send(V, open).

% Controla la accion segun el boton presionado
ejecutar_opcion(toda, Ventana) :-
    mostrar_info_completa(Ventana).
ejecutar_opcion(Filtro, Ventana) :-
    mostrar_info_filtro(Filtro, Ventana).

% Buscar info filtrada
mostrar_info_filtro(Filtro, Ventana) :-
    get(Ventana, member, entrada, Entrada),
    get(Entrada, selection, PlantaInput),
    % Convertir entrada a atom y a minusculas para consistencia con nombres de archivo
    atom_string(PlantaAtom, PlantaInput),
    downcase_atom(PlantaAtom, PlantaLower),
    write('Debug: Planta ingresada: '), writeln(PlantaLower),
    write('Debug: Filtro seleccionado: '), writeln(Filtro),
    (   findall(Linea, info_filtrada(Filtro, PlantaAtom, Linea), Lineas),
        write('Debug: Lineas encontradas: '), writeln(Lineas)
    ->  (Lineas == [] -> Texto = 'No se encontro informacion.'
        ;  atomic_list_concat(Lineas, '\n', Texto))
    ;   Texto = 'Error al procesar la consulta.'),
    get(Ventana, member, salida, CampoTexto),
    send(CampoTexto, clear),
    send(CampoTexto, insert, Texto),
    % Cargar y mostrar la imagen
    atom_concat('C:\\Users\\alexe\\Downloads\\prolog\\prolog\\imgs\\', PlantaLower, BasePath),
    atom_concat(BasePath, '.jpg', FilePath),
    (   exists_file(FilePath)
    ->  (get(Ventana, member, imagen, Imagen),
         send(Imagen, load, FilePath),
         send(Imagen, size, size(40, 40)))
    ;   get(Ventana, member, imagen, Imagen),
        send(Imagen, load, '')) % no muestra nada si la imagen no existe
    .

% Buscar toda la info
mostrar_info_completa(Ventana) :-
    get(Ventana, member, entrada, Entrada),
    get(Entrada, selection, PlantaInput),
    % Convertir entrada a atom y a minusculas para consistencia con nombres de archivo
    atom_string(PlantaAtom, PlantaInput),
    downcase_atom(PlantaAtom, PlantaLower),
    write('Debug: Planta ingresada: '), writeln(PlantaLower),
    (   findall(Linea, info_planta(PlantaAtom, Linea), Lineas),
        write('Debug: Lineas encontradas: '), writeln(Lineas)
    ->  (Lineas == [] -> Texto = 'No se encontro informacion.'
        ;  atomic_list_concat(Lineas, '\n', Texto))
    ;   Texto = 'Error al procesar la consulta.'),
    get(Ventana, member, salida, CampoTexto),
    send(CampoTexto, clear),
    send(CampoTexto, insert, Texto),
    % Cargar y mostrar la imagen
    atom_concat('C:\\Users\\alexe\\Downloads\\prolog\\prolog\\imgs\\', PlantaLower, BasePath),
    atom_concat(BasePath, '.jpg', FilePath),
    (   exists_file(FilePath)
    ->  (get(Ventana, member, imagen, Imagen),
         send(Imagen, load, FilePath),
         send(Imagen, size, size(40, 40)))
    ;   get(Ventana, member, imagen, Imagen),
        send(Imagen, load, '')) % no muestra nada si la imagen no existe
    .

% Filtros especificos
info_filtrada(nombre, Planta, Linea) :-
    nombre_cientifico(Planta, Nombre),
    atom_concat('Nombre cientifico: ', Nombre, Linea).
info_filtrada(origen, Planta, Linea) :-
    (   continente_origen(Planta, Continente),
        atom_concat('Continente de origen: ', Continente, Linea)
    ;   pais_origen(Planta, Pais),
        atom_concat('Pais de origen: ', Pais, Linea)
    ).
info_filtrada(enfermedades, Planta, Linea) :-
    trata_enfermedad(Planta, Enfermedad),
    atom_concat('Trata enfermedad: ', Enfermedad, Linea).
info_filtrada(sintomas, Planta, Linea) :-
    trata_enfermedad(Planta, Enfermedad),
    sintoma_enfermedad(Enfermedad, Sintoma),
    format(atom(Linea), 'Sintoma de ~w: ~w', [Enfermedad, Sintoma]).
info_filtrada(preparacion, Planta, Linea) :-
    (   modo_preparacion(Planta, Forma),
        atom_concat('Modo de preparacion: ', Forma, Linea)
    ;   modo_tratamiento(Planta, Trat),
        format(atom(Linea), 'Modo de tratamiento: ~w', [Trat])
    ).
info_filtrada(acciones, Planta, Linea) :-
    acciones_de_plantas(Planta, Accion),
    write('Debug: Accion encontrada para '), write(Planta), write(': '), writeln(Accion),
    format(atom(Linea), 'Accion de la planta: ~w', [Accion]).






